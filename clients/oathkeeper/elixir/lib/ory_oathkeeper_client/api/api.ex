# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# https://openapi-generator.tech
# Do not edit the class manually.

defmodule OryOathkeeperClient.Api.Api do
  @moduledoc """
  API calls for all endpoints tagged `Api`.
  """

  alias OryOathkeeperClient.Connection
  import OryOathkeeperClient.RequestBuilder


  @doc """
  Access Control Decision API
  > This endpoint works with all HTTP Methods (GET, POST, PUT, ...) and matches every path prefixed with /decision.  This endpoint mirrors the proxy capability of ORY Oathkeeper's proxy functionality but instead of forwarding the request to the upstream server, returns 200 (request should be allowed), 401 (unauthorized), or 403 (forbidden) status codes. This endpoint can be used to integrate with other API Proxies like Ambassador, Kong, Envoy, and many more.

  ## Parameters

  - connection (OryOathkeeperClient.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, nil} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec decisions(Tesla.Env.client, keyword()) :: {:ok, nil} | {:ok, OryOathkeeperClient.Model.InlineResponse500.t} | {:error, Tesla.Env.t}
  def decisions(connection, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/decisions")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, false},
      { 401, %OryOathkeeperClient.Model.InlineResponse500{}},
      { 403, %OryOathkeeperClient.Model.InlineResponse500{}},
      { 404, %OryOathkeeperClient.Model.InlineResponse500{}},
      { 500, %OryOathkeeperClient.Model.InlineResponse500{}}
    ])
  end

  @doc """
  Retrieve a rule
  Use this method to retrieve a rule from the storage. If it does not exist you will receive a 404 error.

  ## Parameters

  - connection (OryOathkeeperClient.Connection): Connection to server
  - id (String.t): 
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, OryOathkeeperClient.Model.Rule.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec get_rule(Tesla.Env.client, String.t, keyword()) :: {:ok, OryOathkeeperClient.Model.InlineResponse500.t} | {:ok, OryOathkeeperClient.Model.Rule.t} | {:error, Tesla.Env.t}
  def get_rule(connection, id, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/rules/#{id}")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %OryOathkeeperClient.Model.Rule{}},
      { 404, %OryOathkeeperClient.Model.InlineResponse500{}},
      { 500, %OryOathkeeperClient.Model.InlineResponse500{}}
    ])
  end

  @doc """
  Get service version
  This endpoint returns the service version typically notated using semantic versioning.  If the service supports TLS Edge Termination, this endpoint does not require the `X-Forwarded-Proto` header to be set.  Be aware that if you are running multiple nodes of this service, the health status will never refer to the cluster state, only to a single instance.

  ## Parameters

  - connection (OryOathkeeperClient.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, OryOathkeeperClient.Model.Version.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec get_version(Tesla.Env.client, keyword()) :: {:ok, OryOathkeeperClient.Model.Version.t} | {:error, Tesla.Env.t}
  def get_version(connection, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/version")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %OryOathkeeperClient.Model.Version{}}
    ])
  end

  @doc """
  Lists cryptographic keys
  This endpoint returns cryptographic keys that are required to, for example, verify signatures of ID Tokens.

  ## Parameters

  - connection (OryOathkeeperClient.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, OryOathkeeperClient.Model.JsonWebKeySet.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec get_well_known_json_web_keys(Tesla.Env.client, keyword()) :: {:ok, OryOathkeeperClient.Model.JsonWebKeySet.t} | {:ok, OryOathkeeperClient.Model.InlineResponse500.t} | {:error, Tesla.Env.t}
  def get_well_known_json_web_keys(connection, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/.well-known/jwks.json")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %OryOathkeeperClient.Model.JsonWebKeySet{}},
      { 500, %OryOathkeeperClient.Model.InlineResponse500{}}
    ])
  end

  @doc """
  Check alive status
  This endpoint returns a 200 status code when the HTTP server is up running. This status does currently not include checks whether the database connection is working.  If the service supports TLS Edge Termination, this endpoint does not require the `X-Forwarded-Proto` header to be set.  Be aware that if you are running multiple nodes of this service, the health status will never refer to the cluster state, only to a single instance.

  ## Parameters

  - connection (OryOathkeeperClient.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, OryOathkeeperClient.Model.HealthStatus.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec is_instance_alive(Tesla.Env.client, keyword()) :: {:ok, OryOathkeeperClient.Model.InlineResponse500.t} | {:ok, OryOathkeeperClient.Model.HealthStatus.t} | {:error, Tesla.Env.t}
  def is_instance_alive(connection, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/health/alive")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %OryOathkeeperClient.Model.HealthStatus{}},
      { 500, %OryOathkeeperClient.Model.InlineResponse500{}}
    ])
  end

  @doc """
  Check readiness status
  This endpoint returns a 200 status code when the HTTP server is up running and the environment dependencies (e.g. the database) are responsive as well.  If the service supports TLS Edge Termination, this endpoint does not require the `X-Forwarded-Proto` header to be set.  Be aware that if you are running multiple nodes of this service, the health status will never refer to the cluster state, only to a single instance.

  ## Parameters

  - connection (OryOathkeeperClient.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, OryOathkeeperClient.Model.HealthStatus.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec is_instance_ready(Tesla.Env.client, keyword()) :: {:ok, OryOathkeeperClient.Model.HealthStatus.t} | {:ok, OryOathkeeperClient.Model.HealthNotReadyStatus.t} | {:error, Tesla.Env.t}
  def is_instance_ready(connection, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/health/ready")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %OryOathkeeperClient.Model.HealthStatus{}},
      { 503, %OryOathkeeperClient.Model.HealthNotReadyStatus{}}
    ])
  end

  @doc """
  List all rules
  This method returns an array of all rules that are stored in the backend. This is useful if you want to get a full view of what rules you have currently in place.

  ## Parameters

  - connection (OryOathkeeperClient.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :limit (integer()): The maximum amount of rules returned.
    - :offset (integer()): The offset from where to start looking.
  ## Returns

  {:ok, [%Rule{}, ...]} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec list_rules(Tesla.Env.client, keyword()) :: {:ok, list(OryOathkeeperClient.Model.Rule.t)} | {:ok, OryOathkeeperClient.Model.InlineResponse500.t} | {:error, Tesla.Env.t}
  def list_rules(connection, opts \\ []) do
    optional_params = %{
      :"limit" => :query,
      :"offset" => :query
    }
    %{}
    |> method(:get)
    |> url("/rules")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, [%OryOathkeeperClient.Model.Rule{}]},
      { 500, %OryOathkeeperClient.Model.InlineResponse500{}}
    ])
  end
end
