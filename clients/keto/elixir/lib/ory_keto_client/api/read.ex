# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# https://openapi-generator.tech
# Do not edit the class manually.

defmodule OryKetoClient.Api.Read do
  @moduledoc """
  API calls for all endpoints tagged `Read`.
  """

  alias OryKetoClient.Connection
  import OryKetoClient.RequestBuilder


  @doc """
  Check a relation tuple
  To learn how relation tuples and the check works, head over to [the documentation](../concepts/relation-tuples.mdx).

  ## Parameters

  - connection (OryKetoClient.Connection): Connection to server
  - namespace (String.t): Namespace of the Relation Tuple
  - object (String.t): Object of the Relation Tuple
  - relation (String.t): Relation of the Relation Tuple
  - opts (KeywordList): [optional] Optional parameters
    - :subject_id (String.t): SubjectID of the Relation Tuple
    - :subject_set_periodnamespace (String.t): Namespace of the Subject Set
    - :subject_set_periodobject (String.t): Object of the Subject Set
    - :subject_set_periodrelation (String.t): Relation of the Subject Set
  ## Returns

  {:ok, OryKetoClient.Model.GetCheckResponse.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec get_check(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, OryKetoClient.Model.GetCheckResponse.t} | {:ok, OryKetoClient.Model.InlineResponse400.t} | {:error, Tesla.Env.t}
  def get_check(connection, namespace, object, relation, opts \\ []) do
    optional_params = %{
      :"subject_id" => :query,
      :"subject_set.namespace" => :query,
      :"subject_set.object" => :query,
      :"subject_set.relation" => :query
    }
    %{}
    |> method(:get)
    |> url("/check")
    |> add_param(:query, :"namespace", namespace)
    |> add_param(:query, :"object", object)
    |> add_param(:query, :"relation", relation)
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %OryKetoClient.Model.GetCheckResponse{}},
      { 400, %OryKetoClient.Model.InlineResponse400{}},
      { 403, %OryKetoClient.Model.GetCheckResponse{}},
      { 500, %OryKetoClient.Model.InlineResponse400{}}
    ])
  end

  @doc """
  Expand a Relation Tuple
  Use this endpoint to expand a relation tuple.

  ## Parameters

  - connection (OryKetoClient.Connection): Connection to server
  - namespace (String.t): Namespace of the Subject Set
  - object (String.t): Object of the Subject Set
  - relation (String.t): Relation of the Subject Set
  - max_depth (integer()): 
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, OryKetoClient.Model.ExpandTree.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec get_expand(Tesla.Env.client, String.t, String.t, String.t, integer(), keyword()) :: {:ok, OryKetoClient.Model.InlineResponse400.t} | {:ok, OryKetoClient.Model.ExpandTree.t} | {:error, Tesla.Env.t}
  def get_expand(connection, namespace, object, relation, max_depth, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/expand")
    |> add_param(:query, :"namespace", namespace)
    |> add_param(:query, :"object", object)
    |> add_param(:query, :"relation", relation)
    |> add_param(:query, :"max-depth", max_depth)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %OryKetoClient.Model.ExpandTree{}},
      { 400, %OryKetoClient.Model.InlineResponse400{}},
      { 404, %OryKetoClient.Model.InlineResponse400{}},
      { 500, %OryKetoClient.Model.InlineResponse400{}}
    ])
  end

  @doc """
  Query relation tuples
  Get all relation tuples that match the query. Only the namespace field is required.

  ## Parameters

  - connection (OryKetoClient.Connection): Connection to server
  - namespace (String.t): Namespace of the Relation Tuple
  - opts (KeywordList): [optional] Optional parameters
    - :page_token (String.t): 
    - :page_size (integer()): 
    - :object (String.t): Object of the Relation Tuple
    - :relation (String.t): Relation of the Relation Tuple
    - :subject_id (String.t): SubjectID of the Relation Tuple
    - :subject_set_periodnamespace (String.t): Namespace of the Subject Set
    - :subject_set_periodobject (String.t): Object of the Subject Set
    - :subject_set_periodrelation (String.t): Relation of the Subject Set
  ## Returns

  {:ok, OryKetoClient.Model.GetRelationTuplesResponse.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec get_relation_tuples(Tesla.Env.client, String.t, keyword()) :: {:ok, OryKetoClient.Model.InlineResponse400.t} | {:ok, OryKetoClient.Model.GetRelationTuplesResponse.t} | {:error, Tesla.Env.t}
  def get_relation_tuples(connection, namespace, opts \\ []) do
    optional_params = %{
      :"page_token" => :query,
      :"page_size" => :query,
      :"object" => :query,
      :"relation" => :query,
      :"subject_id" => :query,
      :"subject_set.namespace" => :query,
      :"subject_set.object" => :query,
      :"subject_set.relation" => :query
    }
    %{}
    |> method(:get)
    |> url("/relation-tuples")
    |> add_param(:query, :"namespace", namespace)
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %OryKetoClient.Model.GetRelationTuplesResponse{}},
      { 404, %OryKetoClient.Model.InlineResponse400{}},
      { 500, %OryKetoClient.Model.InlineResponse400{}}
    ])
  end

  @doc """
  Check a relation tuple
  To learn how relation tuples and the check works, head over to [the documentation](../concepts/relation-tuples.mdx).

  ## Parameters

  - connection (OryKetoClient.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :body (RelationQuery): 
  ## Returns

  {:ok, OryKetoClient.Model.GetCheckResponse.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec post_check(Tesla.Env.client, keyword()) :: {:ok, OryKetoClient.Model.GetCheckResponse.t} | {:ok, OryKetoClient.Model.InlineResponse400.t} | {:error, Tesla.Env.t}
  def post_check(connection, opts \\ []) do
    optional_params = %{
      :body => :body
    }
    %{}
    |> method(:post)
    |> url("/check")
    |> add_optional_params(optional_params, opts)
    |> ensure_body()
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %OryKetoClient.Model.GetCheckResponse{}},
      { 400, %OryKetoClient.Model.InlineResponse400{}},
      { 403, %OryKetoClient.Model.GetCheckResponse{}},
      { 500, %OryKetoClient.Model.InlineResponse400{}}
    ])
  end
end
